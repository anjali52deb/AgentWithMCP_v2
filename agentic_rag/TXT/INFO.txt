Updated Folder Plan

Under ROOT
  agentic_rag/
  ├── master_rag_agent.py        # 🧠 Entry dispatcher: Store or Retrieve
  ├── store_pipeline.py          # 📥 Store pipeline logic
  ├── store_logger.py            # 📝 Supabase logging for store
  ├── retrieve_pipeline.py       # 🔍 Retrieve pipeline logic
  ├── retrieve_logger.py         # 📝 Supabase logging for queries
  ├── universal_loader.py        # 📂 File loader for PDF, TXT, etc.
  ├── index_router.py            # 🧭 Index selection logic
  ├── llm_wrapper.py             # 🧠 LLM switch (GPT/Gemini)
  ├── vector_db_config.json      # 🔧 Config file for index metadata
  ├── utils.py                   # 🔧 Debug log, shared utils
  └── __init__.py

agentic_rag/
├── master_rag_agent.py        # 🧠 Entry dispatcher: Store or Retrieve
├── store_pipeline.py          # 📥 Store pipeline logic (MongoDB-based vector store)
├── store_logger.py            # 📝 Logs STORE events to MongoDB Atlas
├── retrieve_pipeline.py       # 🔍 Retrieve logic using LangChain & MongoDB
├── retrieve_logger.py         # 📝 Logs RETRIEVE queries to MongoDB Atlas
├── universal_loader.py        # 📂 File loader for all supported formats
├── index_router.py            # 🧭 Route request to correct vector index
├── llm_wrapper.py             # 🧠 GPT vs Gemini LLM interface
├── vector_db_config.json      # 🔧 Config file for index and model mapping
├── mongo_client.py            # 🌐 MongoDB vectorstore and log DB connector
├── log_viewer.py              # 📊 CLI utility to view/search MongoDB logs
├── utils.py                   # 🔧 Shared helpers, file utils, logging
└── __init__.py                # 🔁 Python package initializer


✅ ACTION PLAN: ENTERPRISE-GRADE AGENTIC-RAG
🔧 Module Breakdown

| File                    | Purpose                                                                       | STATUS
| ----------------------- | ----------------------------------------------------------------------------- |--------
| `master_rag_agent.py`   | Entrypoint: route Store/Retrieve, validate intent                             | NOT YET UPDATED
| `store_pipeline.py`     | Ingest file → chunk → embed → push to MongoDB vector store                    | UPDATED
| `store_logger.py`       | Logs STORE metadata into MongoDB `store_logs` collection                      | UPDATED
| `retrieve_pipeline.py`  | Accepts query, retrieves relevant chunks, runs LLM synthesis                  | NOT YET UPDATED
| `retrieve_logger.py`    | Logs query, LLM used, result metadata into MongoDB `retrieve_logs`            | UPDATED
| `llm_wrapper.py`        | Abstraction to call GPT-4/Gemini with common config params                    | NEW
| `universal_loader.py`   | Reads and cleans supported file types (PDF, DOCX, MP4, TXT, etc.)             | NOT SURE
| `index_router.py`       | Selects vector index and LLM config based on tag from `vector_db_config.json` | NOT YET UPDATED
| `vector_db_config.json` | Maps index → embedding model → retriever config → chunking strategy           | NOT YET UPDATED
| `mongo_client.py`       | Handles MongoDB vector DB and log connections (via pymongo + langchain)       | NEW
| `log_viewer.py`         | CLI tool to search, filter, and view logs from MongoDB Atlas                  | NEW
| `utils.py`              | Helper functions (debug print, file utils, hash, timers, etc.)                | NOT SURE
| `__init__.py`           | Marks `agentic_rag/` as a Python module                                       |


✅ NEW MODULE: vector_db_config.json
{
  "rag_hr_policy": {
    "domain_tags": ["hr", "leave policy", "attendance", "benefits"],
    "embedding_model": "OpenAI",
    "namespace": "rag_hr_policy"
  },
  "rag_finance": {
    "domain_tags": ["finance", "q1 revenue", "accounts", "audit"],
    "embedding_model": "OpenAI",
    "namespace": "rag_finance"
  },
  "rag_compliance": {
    "domain_tags": ["legal", "compliance", "regulation", "policy"],
    "embedding_model": "OpenAI",
    "namespace": "rag_compliance"
  }
}

