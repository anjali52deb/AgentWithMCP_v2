Here's your **text-based program flow** starting from `TestAgenticRAG.py` — showing exactly how control flows through your Agentic-RAG system:

---

### 🔄 **PROGRAM FLOW: Agentic-RAG (Textual Trace)**

#### 📁 Entry Point:

**`TestAgenticRAG.py`**

You call:

```python
run_master_agent(input_data=..., is_file=..., llm_type=..., temperature=..., debug=True)
```

---

### 🧠 Step 1: Master Agent Dispatch

**File: `master_rag_agent.py`**

```python
if is_file:
    → calls `store_document(...)`
else:
    → calls `retrieve_answer(...)`
```

---

### 📥 STORE PATH

#### 🧾 `store_pipeline.py`

1. Loads file using:
   → `load_file(filepath)` ← from `universal_loader.py`
2. Chunks and classifies each chunk:
   → `classify_text()` ← from `llm_wrapper.py`
3. Routes tag to index:
   → `get_index_for_tag()` ← from `index_router.py`
4. Embeds chunks:
   → Uses `OpenAIEmbeddings` + Pinecone
5. Logs metadata:
   → `log_store_event()` ← from `store_logger.py`

#### 🔐 Logs Stored:

**Table:** `rag_store_logs`

---

### 🔍 RETRIEVE PATH

#### 💬 `retrieve_pipeline.py`

1. Classifies query:
   → `classify_text()` ← from `llm_wrapper.py`
2. Routes tag to index:
   → `get_index_for_tag()` ← from `index_router.py`
3. Retrieves chunks from Pinecone
4. Synthesizes final answer with LLM:
   → `get_llm()` ← from `llm_wrapper.py`
5. Logs query + response:
   → `log_retrieve_event()` ← from `retrieve_logger.py`

#### 🔐 Logs Stored:

**Table:** `rag_retrieve_logs`

---

### 📦 CONFIG + SUPPORT MODULES

| Module                  | Role                          |
| ----------------------- | ----------------------------- |
| `vector_db_config.json` | Maps tags to Pinecone indexes |
| `utils.py`              | Debug log printer             |
| `llm_wrapper.py`        | Unified LLM interface         |
| `universal_loader.py`   | File format-aware loader      |

---

### 🧪 Final Output:

* Printed final answer
* Printed top 5 retrieved chunk previews
* Metadata logs written to Supabase

---

Would you like this visualized as a **diagram** next or exported as a Markdown/Word file?
